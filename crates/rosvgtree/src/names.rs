// This file is autogenerated. Do not edit it!
// See ./codegen for details.

/// An element ID.
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq)]
pub enum ElementId {
    A,
    Circle,
    ClipPath,
    Defs,
    Ellipse,
    FeBlend,
    FeColorMatrix,
    FeComponentTransfer,
    FeComposite,
    FeConvolveMatrix,
    FeDiffuseLighting,
    FeDisplacementMap,
    FeDistantLight,
    FeDropShadow,
    FeFlood,
    FeFuncA,
    FeFuncB,
    FeFuncG,
    FeFuncR,
    FeGaussianBlur,
    FeImage,
    FeMerge,
    FeMergeNode,
    FeMorphology,
    FeOffset,
    FePointLight,
    FeSpecularLighting,
    FeSpotLight,
    FeTile,
    FeTurbulence,
    Filter,
    G,
    Image,
    Line,
    LinearGradient,
    Marker,
    Mask,
    Path,
    Pattern,
    Polygon,
    Polyline,
    RadialGradient,
    Rect,
    Stop,
    Style,
    Svg,
    Switch,
    Symbol,
    Text,
    TextPath,
    Title,
    Tref,
    Tspan,
    Use
}

static ELEMENTS: Map<ElementId> = Map {
    key: 3347381344252206323,
    disps: &[
        (0, 13),
        (4, 4),
        (0, 16),
        (0, 6),
        (12, 29),
        (0, 2),
        (0, 15),
        (8, 48),
        (0, 0),
        (0, 33),
        (18, 49),
    ],
    entries: &[
        ("feMerge", ElementId::FeMerge),
        ("feDiffuseLighting", ElementId::FeDiffuseLighting),
        ("use", ElementId::Use),
        ("mask", ElementId::Mask),
        ("pattern", ElementId::Pattern),
        ("style", ElementId::Style),
        ("feConvolveMatrix", ElementId::FeConvolveMatrix),
        ("tspan", ElementId::Tspan),
        ("textPath", ElementId::TextPath),
        ("feDisplacementMap", ElementId::FeDisplacementMap),
        ("fePointLight", ElementId::FePointLight),
        ("line", ElementId::Line),
        ("feDistantLight", ElementId::FeDistantLight),
        ("feDropShadow", ElementId::FeDropShadow),
        ("defs", ElementId::Defs),
        ("switch", ElementId::Switch),
        ("feBlend", ElementId::FeBlend),
        ("feFuncB", ElementId::FeFuncB),
        ("path", ElementId::Path),
        ("feTurbulence", ElementId::FeTurbulence),
        ("circle", ElementId::Circle),
        ("polygon", ElementId::Polygon),
        ("feComponentTransfer", ElementId::FeComponentTransfer),
        ("g", ElementId::G),
        ("polyline", ElementId::Polyline),
        ("symbol", ElementId::Symbol),
        ("filter", ElementId::Filter),
        ("feColorMatrix", ElementId::FeColorMatrix),
        ("feComposite", ElementId::FeComposite),
        ("clipPath", ElementId::ClipPath),
        ("image", ElementId::Image),
        ("radialGradient", ElementId::RadialGradient),
        ("feFlood", ElementId::FeFlood),
        ("feTile", ElementId::FeTile),
        ("tref", ElementId::Tref),
        ("marker", ElementId::Marker),
        ("feFuncG", ElementId::FeFuncG),
        ("feSpotLight", ElementId::FeSpotLight),
        ("stop", ElementId::Stop),
        ("a", ElementId::A),
        ("text", ElementId::Text),
        ("svg", ElementId::Svg),
        ("title", ElementId::Title),
        ("feFuncA", ElementId::FeFuncA),
        ("feImage", ElementId::FeImage),
        ("feOffset", ElementId::FeOffset),
        ("feGaussianBlur", ElementId::FeGaussianBlur),
        ("rect", ElementId::Rect),
        ("feMergeNode", ElementId::FeMergeNode),
        ("linearGradient", ElementId::LinearGradient),
        ("feFuncR", ElementId::FeFuncR),
        ("ellipse", ElementId::Ellipse),
        ("feSpecularLighting", ElementId::FeSpecularLighting),
        ("feMorphology", ElementId::FeMorphology),
    ],
};

impl ElementId {
    pub(crate) fn from_str(text: &str) -> Option<ElementId> {
        ELEMENTS.get(text).cloned()
    }

    /// Returns the original string.
    #[inline(never)]
    pub fn to_str(self) -> &'static str {
        ELEMENTS.key(&self)
    }
}

impl std::fmt::Debug for ElementId {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.to_str())
    }
}

impl std::fmt::Display for ElementId {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

/// An attribute ID.
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq)]
pub enum AttributeId {
    AlignmentBaseline,
    Amplitude,
    Azimuth,
    BaseFrequency,
    BaselineShift,
    Bias,
    Class,
    Clip,
    ClipPath,
    ClipRule,
    ClipPathUnits,
    Color,
    ColorInterpolation,
    ColorInterpolationFilters,
    ColorProfile,
    ColorRendering,
    Cx,
    Cy,
    D,
    DiffuseConstant,
    Direction,
    Display,
    Divisor,
    DominantBaseline,
    Dx,
    Dy,
    EdgeMode,
    Elevation,
    EnableBackground,
    Exponent,
    Fill,
    FillOpacity,
    FillRule,
    Filter,
    FilterUnits,
    FloodColor,
    FloodOpacity,
    Font,
    FontFamily,
    FontFeatureSettings,
    FontKerning,
    FontSize,
    FontSizeAdjust,
    FontStretch,
    FontStyle,
    FontSynthesis,
    FontVariant,
    FontVariantCaps,
    FontVariantEastAsian,
    FontVariantLigatures,
    FontVariantNumeric,
    FontVariantPosition,
    FontWeight,
    Fr,
    Fx,
    Fy,
    GlyphOrientationHorizontal,
    GlyphOrientationVertical,
    GradientTransform,
    GradientUnits,
    Height,
    Href,
    Id,
    ImageRendering,
    In,
    In2,
    InlineSize,
    Intercept,
    Isolation,
    K1,
    K2,
    K3,
    K4,
    KernelMatrix,
    KernelUnitLength,
    Kerning,
    Label,
    LengthAdjust,
    LetterSpacing,
    LightingColor,
    LimitingConeAngle,
    LineHeight,
    MarkerEnd,
    MarkerMid,
    MarkerStart,
    MarkerHeight,
    MarkerUnits,
    MarkerWidth,
    Mask,
    MaskBorder,
    MaskBorderMode,
    MaskBorderOutset,
    MaskBorderRepeat,
    MaskBorderSlice,
    MaskBorderSource,
    MaskBorderWidth,
    MaskClip,
    MaskComposite,
    MaskImage,
    MaskMode,
    MaskOrigin,
    MaskPosition,
    MaskSize,
    MaskType,
    MaskContentUnits,
    MaskUnits,
    MixBlendMode,
    Mode,
    NumOctaves,
    Offset,
    Opacity,
    Operator,
    Order,
    Orient,
    Overflow,
    PaintOrder,
    Path,
    PathLength,
    PatternContentUnits,
    PatternTransform,
    PatternUnits,
    Points,
    PointsAtX,
    PointsAtY,
    PointsAtZ,
    PreserveAlpha,
    PreserveAspectRatio,
    PrimitiveUnits,
    R,
    Radius,
    RefX,
    RefY,
    RequiredExtensions,
    RequiredFeatures,
    Result,
    Rotate,
    Rx,
    Ry,
    Scale,
    Seed,
    ShapeImageThreshold,
    ShapeInside,
    ShapeMargin,
    ShapePadding,
    ShapeRendering,
    ShapeSubtract,
    Side,
    Slope,
    Space,
    SpecularConstant,
    SpecularExponent,
    SpreadMethod,
    StartOffset,
    StdDeviation,
    StitchTiles,
    StopColor,
    StopOpacity,
    Stroke,
    StrokeDasharray,
    StrokeDashoffset,
    StrokeLinecap,
    StrokeLinejoin,
    StrokeMiterlimit,
    StrokeOpacity,
    StrokeWidth,
    Style,
    SurfaceScale,
    SystemLanguage,
    TableValues,
    TargetX,
    TargetY,
    TextAlign,
    TextAlignLast,
    TextAnchor,
    TextDecoration,
    TextDecorationColor,
    TextDecorationFill,
    TextDecorationLine,
    TextDecorationStroke,
    TextDecorationStyle,
    TextIndent,
    TextOrientation,
    TextOverflow,
    TextRendering,
    TextUnderlinePosition,
    TextLength,
    Transform,
    TransformBox,
    TransformOrigin,
    Type,
    UnicodeBidi,
    UnicodeRange,
    Values,
    VectorEffect,
    ViewBox,
    Visibility,
    WhiteSpace,
    Width,
    WordSpacing,
    WritingMode,
    X,
    X1,
    X2,
    XChannelSelector,
    Y,
    Y1,
    Y2,
    YChannelSelector,
    Z
}

static ATTRIBUTES: Map<AttributeId> = Map {
    key: 3347381344252206323,
    disps: &[
        (0, 166),
        (0, 2),
        (0, 36),
        (0, 48),
        (0, 27),
        (0, 100),
        (0, 5),
        (0, 197),
        (0, 22),
        (8, 79),
        (0, 52),
        (1, 180),
        (0, 21),
        (10, 120),
        (0, 40),
        (1, 30),
        (0, 24),
        (0, 1),
        (0, 138),
        (0, 10),
        (0, 0),
        (0, 4),
        (0, 35),
        (1, 160),
        (11, 71),
        (0, 13),
        (0, 54),
        (2, 39),
        (57, 121),
        (0, 53),
        (0, 24),
        (44, 157),
        (0, 14),
        (0, 76),
        (0, 15),
        (0, 163),
        (0, 9),
        (15, 185),
        (0, 17),
        (2, 115),
        (32, 70),
        (1, 1),
    ],
    entries: &[
        ("mask-border-source", AttributeId::MaskBorderSource),
        ("stop-opacity", AttributeId::StopOpacity),
        ("stroke-linejoin", AttributeId::StrokeLinejoin),
        ("dominant-baseline", AttributeId::DominantBaseline),
        ("spreadMethod", AttributeId::SpreadMethod),
        ("points", AttributeId::Points),
        ("stroke", AttributeId::Stroke),
        ("values", AttributeId::Values),
        ("text-align", AttributeId::TextAlign),
        ("font-size", AttributeId::FontSize),
        ("maskContentUnits", AttributeId::MaskContentUnits),
        ("mask-size", AttributeId::MaskSize),
        ("path", AttributeId::Path),
        ("specularConstant", AttributeId::SpecularConstant),
        ("color", AttributeId::Color),
        ("display", AttributeId::Display),
        ("fill-opacity", AttributeId::FillOpacity),
        ("word-spacing", AttributeId::WordSpacing),
        ("cy", AttributeId::Cy),
        ("startOffset", AttributeId::StartOffset),
        ("mask-origin", AttributeId::MaskOrigin),
        ("lengthAdjust", AttributeId::LengthAdjust),
        ("white-space", AttributeId::WhiteSpace),
        ("opacity", AttributeId::Opacity),
        ("divisor", AttributeId::Divisor),
        ("gradientUnits", AttributeId::GradientUnits),
        ("stroke-dashoffset", AttributeId::StrokeDashoffset),
        ("fill", AttributeId::Fill),
        ("space", AttributeId::Space),
        ("baseline-shift", AttributeId::BaselineShift),
        ("slope", AttributeId::Slope),
        ("color-rendering", AttributeId::ColorRendering),
        ("unicode-range", AttributeId::UnicodeRange),
        ("font-variant-caps", AttributeId::FontVariantCaps),
        ("text-rendering", AttributeId::TextRendering),
        ("exponent", AttributeId::Exponent),
        ("text-decoration-color", AttributeId::TextDecorationColor),
        ("refX", AttributeId::RefX),
        ("x1", AttributeId::X1),
        ("scale", AttributeId::Scale),
        ("clip-rule", AttributeId::ClipRule),
        ("kerning", AttributeId::Kerning),
        ("mix-blend-mode", AttributeId::MixBlendMode),
        ("mask-clip", AttributeId::MaskClip),
        ("mask-mode", AttributeId::MaskMode),
        ("type", AttributeId::Type),
        ("mask-border", AttributeId::MaskBorder),
        ("mode", AttributeId::Mode),
        ("mask-border-repeat", AttributeId::MaskBorderRepeat),
        ("stroke-miterlimit", AttributeId::StrokeMiterlimit),
        ("letter-spacing", AttributeId::LetterSpacing),
        ("font-stretch", AttributeId::FontStretch),
        ("offset", AttributeId::Offset),
        ("clip-path", AttributeId::ClipPath),
        ("markerHeight", AttributeId::MarkerHeight),
        ("text-underline-position", AttributeId::TextUnderlinePosition),
        ("text-align-last", AttributeId::TextAlignLast),
        ("width", AttributeId::Width),
        ("font", AttributeId::Font),
        ("font-family", AttributeId::FontFamily),
        ("mask-position", AttributeId::MaskPosition),
        ("result", AttributeId::Result),
        ("font-size-adjust", AttributeId::FontSizeAdjust),
        ("shape-margin", AttributeId::ShapeMargin),
        ("direction", AttributeId::Direction),
        ("font-variant", AttributeId::FontVariant),
        ("radius", AttributeId::Radius),
        ("maskUnits", AttributeId::MaskUnits),
        ("clipPathUnits", AttributeId::ClipPathUnits),
        ("text-orientation", AttributeId::TextOrientation),
        ("amplitude", AttributeId::Amplitude),
        ("ry", AttributeId::Ry),
        ("mask-type", AttributeId::MaskType),
        ("filter", AttributeId::Filter),
        ("in", AttributeId::In),
        ("dx", AttributeId::Dx),
        ("seed", AttributeId::Seed),
        ("class", AttributeId::Class),
        ("color-profile", AttributeId::ColorProfile),
        ("x", AttributeId::X),
        ("href", AttributeId::Href),
        ("font-feature-settings", AttributeId::FontFeatureSettings),
        ("fill-rule", AttributeId::FillRule),
        ("fr", AttributeId::Fr),
        ("mask-border-mode", AttributeId::MaskBorderMode),
        ("text-decoration-style", AttributeId::TextDecorationStyle),
        ("numOctaves", AttributeId::NumOctaves),
        ("shape-padding", AttributeId::ShapePadding),
        ("visibility", AttributeId::Visibility),
        ("id", AttributeId::Id),
        ("targetX", AttributeId::TargetX),
        ("transform-box", AttributeId::TransformBox),
        ("stitchTiles", AttributeId::StitchTiles),
        ("text-decoration-line", AttributeId::TextDecorationLine),
        ("requiredFeatures", AttributeId::RequiredFeatures),
        ("intercept", AttributeId::Intercept),
        ("tableValues", AttributeId::TableValues),
        ("text-overflow", AttributeId::TextOverflow),
        ("paint-order", AttributeId::PaintOrder),
        ("azimuth", AttributeId::Azimuth),
        ("text-indent", AttributeId::TextIndent),
        ("isolation", AttributeId::Isolation),
        ("text-decoration-stroke", AttributeId::TextDecorationStroke),
        ("gradientTransform", AttributeId::GradientTransform),
        ("stroke-linecap", AttributeId::StrokeLinecap),
        ("systemLanguage", AttributeId::SystemLanguage),
        ("stroke-width", AttributeId::StrokeWidth),
        ("requiredExtensions", AttributeId::RequiredExtensions),
        ("writing-mode", AttributeId::WritingMode),
        ("order", AttributeId::Order),
        ("height", AttributeId::Height),
        ("shape-image-threshold", AttributeId::ShapeImageThreshold),
        ("style", AttributeId::Style),
        ("pointsAtZ", AttributeId::PointsAtZ),
        ("rx", AttributeId::Rx),
        ("font-synthesis", AttributeId::FontSynthesis),
        ("markerUnits", AttributeId::MarkerUnits),
        ("lighting-color", AttributeId::LightingColor),
        ("cx", AttributeId::Cx),
        ("alignment-baseline", AttributeId::AlignmentBaseline),
        ("font-kerning", AttributeId::FontKerning),
        ("kernelMatrix", AttributeId::KernelMatrix),
        ("glyph-orientation-vertical", AttributeId::GlyphOrientationVertical),
        ("mask-border-outset", AttributeId::MaskBorderOutset),
        ("primitiveUnits", AttributeId::PrimitiveUnits),
        ("textLength", AttributeId::TextLength),
        ("text-decoration-fill", AttributeId::TextDecorationFill),
        ("fy", AttributeId::Fy),
        ("unicode-bidi", AttributeId::UnicodeBidi),
        ("k3", AttributeId::K3),
        ("font-variant-numeric", AttributeId::FontVariantNumeric),
        ("orient", AttributeId::Orient),
        ("k1", AttributeId::K1),
        ("refY", AttributeId::RefY),
        ("edgeMode", AttributeId::EdgeMode),
        ("shape-rendering", AttributeId::ShapeRendering),
        ("font-variant-ligatures", AttributeId::FontVariantLigatures),
        ("y", AttributeId::Y),
        ("marker-end", AttributeId::MarkerEnd),
        ("rotate", AttributeId::Rotate),
        ("transform", AttributeId::Transform),
        ("patternContentUnits", AttributeId::PatternContentUnits),
        ("mask", AttributeId::Mask),
        ("font-variant-position", AttributeId::FontVariantPosition),
        ("elevation", AttributeId::Elevation),
        ("pathLength", AttributeId::PathLength),
        ("text-decoration", AttributeId::TextDecoration),
        ("shape-subtract", AttributeId::ShapeSubtract),
        ("preserveAspectRatio", AttributeId::PreserveAspectRatio),
        ("y2", AttributeId::Y2),
        ("dy", AttributeId::Dy),
        ("yChannelSelector", AttributeId::YChannelSelector),
        ("xChannelSelector", AttributeId::XChannelSelector),
        ("image-rendering", AttributeId::ImageRendering),
        ("z", AttributeId::Z),
        ("patternUnits", AttributeId::PatternUnits),
        ("marker-start", AttributeId::MarkerStart),
        ("pointsAtY", AttributeId::PointsAtY),
        ("d", AttributeId::D),
        ("shape-inside", AttributeId::ShapeInside),
        ("preserveAlpha", AttributeId::PreserveAlpha),
        ("color-interpolation", AttributeId::ColorInterpolation),
        ("operator", AttributeId::Operator),
        ("marker-mid", AttributeId::MarkerMid),
        ("kernelUnitLength", AttributeId::KernelUnitLength),
        ("bias", AttributeId::Bias),
        ("mask-border-slice", AttributeId::MaskBorderSlice),
        ("pointsAtX", AttributeId::PointsAtX),
        ("stop-color", AttributeId::StopColor),
        ("line-height", AttributeId::LineHeight),
        ("label", AttributeId::Label),
        ("fx", AttributeId::Fx),
        ("patternTransform", AttributeId::PatternTransform),
        ("glyph-orientation-horizontal", AttributeId::GlyphOrientationHorizontal),
        ("transform-origin", AttributeId::TransformOrigin),
        ("font-weight", AttributeId::FontWeight),
        ("overflow", AttributeId::Overflow),
        ("y1", AttributeId::Y1),
        ("r", AttributeId::R),
        ("k2", AttributeId::K2),
        ("text-anchor", AttributeId::TextAnchor),
        ("inline-size", AttributeId::InlineSize),
        ("x2", AttributeId::X2),
        ("limitingConeAngle", AttributeId::LimitingConeAngle),
        ("color-interpolation-filters", AttributeId::ColorInterpolationFilters),
        ("stdDeviation", AttributeId::StdDeviation),
        ("baseFrequency", AttributeId::BaseFrequency),
        ("surfaceScale", AttributeId::SurfaceScale),
        ("font-variant-east-asian", AttributeId::FontVariantEastAsian),
        ("mask-image", AttributeId::MaskImage),
        ("clip", AttributeId::Clip),
        ("markerWidth", AttributeId::MarkerWidth),
        ("flood-color", AttributeId::FloodColor),
        ("in2", AttributeId::In2),
        ("side", AttributeId::Side),
        ("mask-composite", AttributeId::MaskComposite),
        ("k4", AttributeId::K4),
        ("mask-border-width", AttributeId::MaskBorderWidth),
        ("vector-effect", AttributeId::VectorEffect),
        ("viewBox", AttributeId::ViewBox),
        ("font-style", AttributeId::FontStyle),
        ("enable-background", AttributeId::EnableBackground),
        ("filterUnits", AttributeId::FilterUnits),
        ("stroke-dasharray", AttributeId::StrokeDasharray),
        ("specularExponent", AttributeId::SpecularExponent),
        ("stroke-opacity", AttributeId::StrokeOpacity),
        ("targetY", AttributeId::TargetY),
        ("flood-opacity", AttributeId::FloodOpacity),
        ("diffuseConstant", AttributeId::DiffuseConstant),
    ],
};

impl AttributeId {
    pub(crate) fn from_str(text: &str) -> Option<AttributeId> {
        ATTRIBUTES.get(text).cloned()
    }

    /// Returns the original string.
    #[inline(never)]
    pub fn to_str(self) -> &'static str {
        ATTRIBUTES.key(&self)
    }
}

impl std::fmt::Debug for AttributeId {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.to_str())
    }
}

impl std::fmt::Display for AttributeId {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

// A stripped down `phf` crate fork.
//
// https://github.com/sfackler/rust-phf

struct Map<V: 'static> {
    pub key: u64,
    pub disps: &'static [(u32, u32)],
    pub entries: &'static[(&'static str, V)],
}

impl<V: PartialEq> Map<V> {
    fn get(&self, key: &str) -> Option<&V> {
        use std::borrow::Borrow;

        let hash = hash(key, self.key);
        let index = get_index(hash, self.disps, self.entries.len());
        let entry = &self.entries[index as usize];
        let b = entry.0.borrow();
        if b == key {
            Some(&entry.1)
        } else {
            None
        }
    }

    fn key(&self, value: &V) -> &'static str {
        self.entries.iter().find(|kv| kv.1 == *value).unwrap().0
    }
}

#[inline]
fn hash(x: &str, key: u64) -> u64 {
    use std::hash::Hasher;

    let mut hasher = siphasher::sip::SipHasher13::new_with_keys(0, key);
    hasher.write(x.as_bytes());
    hasher.finish()
}

#[inline]
fn get_index(hash: u64, disps: &[(u32, u32)], len: usize) -> u32 {
    let (g, f1, f2) = split(hash);
    let (d1, d2) = disps[(g % (disps.len() as u32)) as usize];
    displace(f1, f2, d1, d2) % (len as u32)
}

#[inline]
fn split(hash: u64) -> (u32, u32, u32) {
    const BITS: u32 = 21;
    const MASK: u64 = (1 << BITS) - 1;

    ((hash & MASK) as u32,
     ((hash >> BITS) & MASK) as u32,
     ((hash >> (2 * BITS)) & MASK) as u32)
}

#[inline]
fn displace(f1: u32, f2: u32, d1: u32, d2: u32) -> u32 {
    d2 + f1 * d1 + f2
}
